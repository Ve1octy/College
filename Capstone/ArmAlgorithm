import math
import pandas as pd
import numpy as np

# Lengths of the lines
M = 8.255
N = 20.32
O = 16.51
P = 22.70

def calculate_coordinates_and_base_distance(a, b, c):
    # Calculate coordinates for each point
    # Point 0: (0, 0)

    #P_Point
    x1=0
    y1=0

    #O_point
    x2=0
    y2= 22.70    #22.86

    #N_point
    x3 = x2 - 16.51*math.sin(math.radians(a))  #19.05
    y3 = y2 - 16.51*math.cos(math.radians(a))

    #M_point
    x4 = x3 - 20.32*math.sin(math.radians(b)) #19.685
    y4 = y3 + 20.32*math.cos(math.radians(b))

    #S_point
    x5 = x4 
    y5 = y4 - 8.255

    c = 360 - a - b

    # Define the coordinates of the points
    x_coords = [x1, x2, x3, x4, x5]
    y_coords = [y1, y2, y3, y4, y5]

    # Define vectors between consecutive points
    vectors = [
        [x2 - x1, y2 - y1],  # Vector 1 (x1 to x2)
        [x3 - x2, y3 - y2],  # Vector 2 (x2 to x3)
        [x4 - x3, y4 - y3],  # Vector 3 (x3 to x4)
        [x5 - x4, y5 - y4]   # Vector 4 (x4 to x5)
        ]   

    # Calculate angles dynamically
    angles = []
    for i in range(len(vectors) - 1):  # Loop through pairs of vectors
        u = np.array(vectors[i])      # Vector u
        v = np.array(vectors[i + 1])  # Vector v
    
        # Compute dot product and magnitudes
        dot_product = np.dot(u, v)
        magnitude_u = np.linalg.norm(u)
        magnitude_v = np.linalg.norm(v)
    
        # Calculate the angle (in degrees)
        angle = np.degrees(np.arccos(dot_product / (magnitude_u * magnitude_v)))
        angles.append(angle)
    
    #return(a, real_a_angle, b, real_b_angle, c, real_c_angle, Result, distance, x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, numerator_a, denominator_a, result_a, clamped_a, numerator_b, denominator_b, result_b, clamped_b, numerator_c, denominator_c, result_c, clamped_c)
    return(a, b, c, x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, angles)


angle_range_a = range(0, 360, 1)
angle_range_b = range(0, 360, 1)

results = []

#for a in angle_range:
#    for b in angle_range:
for a in angle_range_a:
    for b in angle_range_b:
        #angle_a, real_angle_a, angle_b, real_angle_b, angle_c, real_angle_c, result, distance, x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, numerator_a, denominator_a, result_a, clamped_a, numerator_b, denominator_b, result_b, clamped_b, numerator_c, denominator_c, result_c, clamped_c= calculate_coordinates_and_base_distance(a, b)
        angle_a, angle_b, angle_c, x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, angles = calculate_coordinates_and_base_distance(a, b)
            #results.append({"a": angle_a, "Real a": real_angle_a, "b": angle_b, "Real b": real_angle_b, "c": angle_c, "Real c": real_angle_c, "result": result, "base_distance": distance, "x1": x1, "y1": y1, "x2": x2, "y2": y2, "x3": x3, "y3": y3, "x4": x4, "y4": y4, "x5": x5, "y5": y5, "numerator_a": numerator_a, "denominator_a": denominator_a, "result_a": result_a, "clamped_a": clamped_a, "numerator_b": numerator_b, "denominator_b": denominator_b, "result_b": result_b, "clamped_b": clamped_b, "numerator_c": numerator_c, "denominator_c": denominator_c, "result_c": result_c, "clamped_c": clamped_c})
        if x3 < x4:
            angles[2] = 180 + angles[2]

        elif x3 > x4:
            angles[2] = 180 - angles[2]
        results.append({"a": angle_a, "b": angle_b, "c": angle_c, "x1": x1, "y1": y1, "x2": x2, "y2": y2, "x3": x3, "y3": y3, "x4": x4, "y4": y4, "x5": x5, "y5": y5, "angle_a": 180-angles[0], "angle_b": 180-angles[1], "angle_c": angles[2]})
print("Test completed")

# Create a DataFrame and save to Excel
resultstdata = pd.DataFrame(results)

datatoexcel = pd.ExcelWriter('ArmAllPositionsTipDown.xlsx')

resultstdata.to_excel(datatoexcel)

datatoexcel.close()
