import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Aidan Sivak
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Prints xml version, doctype, html and meta
        out.println("<?xml version'1.0' encoding='UTF-8'?>");
        out.println(
                "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">");
        out.println("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
        out.println("<head>");
        out.println(
                "<meta http-equic='Content-Type' content='text/html; charset=UTF=8' />");

        //Prints title if available
        int n = getChildElement(channel, "title");
        if (n == -1) {
            out.println("<title>Empty Title</title>");
        } else {
            XMLTree title = channel.child(getChildElement(channel, "title"));
            String header = title.child(0).label();
            out.println("<title>" + header + "</title>");
        }

        //Close head and open body
        out.println("</head>");
        out.println("<body>");

        //Prints header with interactive link
        XMLTree title = channel.child(getChildElement(channel, "title"));
        String header = title.child(0).label();
        XMLTree link = channel.child(getChildElement(channel, "link"));
        String linkHeader = link.child(0).label();
        out.println(
                "<h1> <a href = " + linkHeader + ">" + header + "</a> </h1>");

        //Checks for description and prints if available
        n = getChildElement(channel, "description");
        if (n == -1) {
            out.println("<p>No description</p>");
        } else {
            XMLTree description = channel
                    .child(getChildElement(channel, "description"));
            String contentDescription = description.child(0).label();
            out.println("<p>" + contentDescription + "</p>");
        }

        //Prints out table header and columns with tags
        out.println("<p>Table of the latest news and headlines.</p>");
        out.println("<table border='1'>");
        out.println("<tr>");
        out.println("<td><strong>Date</strong></td>");
        out.println("<td><strong>Source</strong></td>");
        out.println("<td><strong>News</strong></td>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Print closing tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int n = 0, m = 0;
        String name = xml.child(n).label();

        //Finds the child element
        while (!name.equals(tag) && n < xml.numberOfChildren()) {

            name = xml.child(n).label();

            if (name.equals(tag)) {
                m = n;
            }

            n = n + 1;
        }

        //Returns correct child element
        if (!name.equals(tag)) {
            return -1;
        } else {
            return m;
        }

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //new table row
        out.println("<tr>");

        // Print pubDate if available
        int n = getChildElement(item, "pubDate");
        if (n == -1) {
            out.println("<td>No date available</td>");
        } else {
            String contentPubDate = item.child(n).child(0).label();
            out.println("<td>" + contentPubDate + "</td>");
        }

        //Print source is available
        n = getChildElement(item, "source");
        if (n == -1) {
            out.println("<td>No source available</td>");
        } else {
            String url = item.child(n).attributeValue("url");
            String contentSource = item.child(n).child(0).label();
            out.println(
                    "<td><a href = " + url + ">" + contentSource + "</a></td>");
        }

        //Prints title if available
        n = getChildElement(item, "title");
        if (n == -1) {
            n = getChildElement(item, "description");
            String contentDescription = item.child(n).child(0).label();
            n = getChildElement(item, "link");
            if (n == -1) {
                out.println("<td>" + contentDescription + "</td>");
            } else {
                String url = item.child(n).child(0).label();
                out.println("<td><a href = " + url + ">" + contentDescription
                        + "</a></td>");
            }
        }

        else {
            String contentTitle = item.child(n).child(0).label();
            n = getChildElement(item, "link");
            if (n == -1) {
                out.println("<td>" + contentTitle + "</td>");
            } else {
                String url = item.child(n).child(0).label();
                out.println("<td><a href = " + url + ">" + contentTitle
                        + "</a></td>");
            }
        }
        //End the table row
        out.println("</tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        String value = null;

        //Asks user input of RSS 2.0
        out.println("Please enter the URL of an RSS 2.0 feed");
        XMLTree feed = new XMLTree1(in.nextLine());

        //Test to check for acceptable RSS 2.0 feed
        String root = feed.label();
        boolean a = feed.hasAttribute("version");
        if (a) {
            value = feed.attributeValue("version");
        }

        while (root != "rss" && !a && value != "2.0") {
            out.println("Not a RSS 2.0 feed");

            out.println("Enter a correct URL of an RSS 2.0 feed");
            XMLTree tree = new XMLTree1(in.nextLine());

            root = tree.label();
            a = tree.hasAttribute("version");

            if (a) {
                value = feed.attributeValue("version");
            }

        }

        //Asks for user input for name of output file
        out.println("Please enter name of output file");
        SimpleWriter outFile = new SimpleWriter1L(in.nextLine());

        XMLTree channel = feed.child(0);
        outputHeader(channel, outFile);

        //Filling table information row by row
        int b = getChildElement(channel, "item");
        if (b != -1) {
            processItem(channel.child(b), outFile);
            b++;
            while (b < channel.numberOfChildren()) {
                if (channel.child(b).label().equals("item")) {
                    processItem(channel.child(b), outFile);
                }
                b++;
            }
        }

        outputFooter(outFile);

        in.close();
        out.close();
    }

}
